{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"tolerance.js","sourcesContent":["var app = angular.module('ToleranceApp', [])\n                  .constant('API_URL', '/admin/api/v1/');\n\napp.controller('ToleranceAppCtrl', function($scope, $http, API_URL){\n\n  resetCurItemForm();\n\n  $scope.updateGrid = function(system, range_id) {\n    if (!$scope.fields || !$scope.qualities || !system || !range_id) {\n      return false;\n    }\n    resetCurItemForm();\n    $http({\n      url: API_URL + 'tolerances',\n      method: \"GET\",\n      params: {\n        system: system,\n        range_id: range_id\n      }\n    }).success(function(data){\n      initGrid();\n      angular.forEach(data, function (tolerance, key) {\n        toleranceToFloat(tolerance);\n        $scope.grid[tolerance.field_id][tolerance.quality_id] = tolerance;\n      });\n    })\n  }\n\n  $http.get(API_URL + 'systems').success(initSystems);\n  $http.get(API_URL + 'ranges').success(initRanges);\n  $http.get(API_URL + 'qualities').success(initQualities);\n  $http.get(API_URL + 'fields').success(initFields);\n\n  var changeCurSystemHendler = function (new_val, old_val, scope) {\n      scope.updateGrid(new_val, scope.cur_range);\n  };\n\n  var changeCurRangeHendler = function (new_val, old_val, scope) {\n      scope.updateGrid(scope.cur_system, new_val);\n  };\n\n  $scope.$watch('cur_system', changeCurSystemHendler);\n  $scope.$watch('cur_range', changeCurRangeHendler);\n\n\n  function initSystems(response) {\n    $scope.systems = response;\n    $scope.cur_system = $scope.systems[1]['title'];\n  }\n\n  function initRanges(response) {\n    $scope.ranges = response;\n    $scope.cur_range_arr_id = 0;\n    $scope.prev_range_arr_id = $scope.cur_range_arr_id - 1;\n    $scope.cur_range = $scope.ranges[$scope.cur_range_arr_id]['id'];\n  }\n\n  function initQualities(response) {\n    $scope.qualities = response;\n    $scope.updateGrid($scope.cur_system, $scope.cur_range);\n    initGrid();\n  }\n\n  function initFields(response) {\n    $scope.fields = response;\n    $scope.updateGrid($scope.cur_system, $scope.cur_range);\n    initGrid();\n  }\n\n  function initGrid() {\n    if (!$scope.fields || !$scope.qualities) {\n      return false;\n    }\n    $scope.grid = {};\n    angular.forEach($scope.fields, function (field, key) {\n      $scope.grid[field.id] = {};\n      angular.forEach($scope.qualities, function (quality, key) {\n        $scope.grid[field.id][quality.id] = {};\n      });\n    });\n  }\n\n  $scope.editItem = function(field, quality, f, q){\n    $scope.cur_max_val = $scope.grid[field.id][quality.id].max_val;\n    $scope.cur_min_val = $scope.grid[field.id][quality.id].min_val;\n    $scope.cur_item = $scope.grid[field.id][quality.id];\n    $scope.cur_field_name = field.title;\n    $scope.cur_quality_name = quality.title;\n    $scope.cur_field = field.id;\n    $scope.cur_quality = quality.id;\n    $scope.cur_field_arr_id = f;\n    $scope.cur_quality_arr_id = q;\n    $scope.cur_max_val_focus = false;\n    $scope.cur_max_val_focus = true;\n    fillPrevRangeTolerance();\n  };\n\n  $scope.updateField = function(){\n    var params = {\n      max_val: $scope.cur_max_val,\n      min_val: $scope.cur_min_val,\n      system: $scope.cur_system,\n      range_id: $scope.cur_range,\n      field_id: $scope.cur_field,\n      quality_id: $scope.cur_quality,\n      id: $scope.cur_item.id\n    };\n    $http({\n      method: 'POST',\n      url: API_URL + 'tolerances',\n      data: $.param(params),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n    }).success(function(data){\n      $scope.errors = {};\n      if (data) {\n        toleranceToFloat(data);\n      }\n      $scope.grid[$scope.cur_field][$scope.cur_quality] = data;\n      $scope.cur_item = $scope.grid[$scope.cur_field][$scope.cur_quality];\n    }).error(function(data, status){\n      console.error(data);\n      $scope.errors = data;\n    });\n  };\n\n  $scope.keyupHandler = function (event) {\n    event.stopPropagation();\n    switch (event.keyCode) {\n      case 38: // up\n        var new_q = $scope.cur_quality_arr_id - 1;\n        if ($scope.qualities[new_q] !== undefined) {\n          $scope.editItem($scope.fields[$scope.cur_field_arr_id], $scope.qualities[new_q], $scope.cur_field_arr_id, new_q);\n        }\n        break;\n      case 40: // down\n        var new_q = $scope.cur_quality_arr_id + 1;\n        if ($scope.qualities[new_q] !== undefined) {\n          $scope.editItem($scope.fields[$scope.cur_field_arr_id], $scope.qualities[new_q], $scope.cur_field_arr_id, new_q);\n        }\n        break;\n      case 37: // left\n        var new_f = $scope.cur_field_arr_id - 1;\n        if ($scope.fields[new_f] !== undefined) {\n          $scope.editItem($scope.fields[new_f], $scope.qualities[$scope.cur_quality_arr_id], new_f, $scope.cur_quality_arr_id);\n        }\n        break;\n      case 39: // right\n        var new_f = $scope.cur_field_arr_id + 1;\n        if ($scope.fields[new_f] !== undefined) {\n          $scope.editItem($scope.fields[new_f], $scope.qualities[$scope.cur_quality_arr_id], new_f, $scope.cur_quality_arr_id);\n        }\n        break;\n      case 32: // space\n        if ($scope.prev_range_tolerance) {\n          $scope.cur_max_val = $scope.prev_range_tolerance.max_val;\n          $scope.cur_min_val = $scope.prev_range_tolerance.min_val;\n        }\n        break;\n      default:\n\n    }\n  };\n\n    $scope.toleranceChangeHandler = function (type) {\n        if (!$scope.delta) return;\n        if (type === 'max') {\n            $scope.cur_min_val = $scope.cur_max_val - $scope.delta;\n        } else if (type === 'min') {\n            $scope.cur_max_val = $scope.cur_min_val + $scope.delta;\n        }\n    };\n\n  $scope.rangeChangedHandler = function (r, range) {\n    $scope.cur_range_arr_id = r;\n    $scope.prev_range_arr_id = $scope.cur_range_arr_id - 1;\n  };\n\n  $scope.fieldBySystem = function(text){\n    return ($scope.cur_system === 'hole')? text.toUpperCase(): text;\n  };\n\n  function toleranceToFloat (tolerance){\n    tolerance.max_val = tolerance.max_val ? parseFloat(tolerance.max_val) : null;\n    tolerance.min_val = tolerance.min_val ? parseFloat(tolerance.min_val) : null;\n  }\n\n  function resetCurItemForm(){\n    $scope.cur_max_val = '';\n    $scope.cur_min_val = '';\n    $scope.cur_item = undefined;\n    $scope.cur_field_name = '';\n    $scope.cur_quality_name = '';\n    $scope.cur_field_arr_id = undefined;\n    $scope.cur_quality_arr_id = undefined;\n    $scope.prev_range_tolerance = {};\n  }\n  \n  function fillPrevRangeTolerance() {\n    if (!$scope.ranges[$scope.prev_range_arr_id]) {\n      return;\n    }\n    $http({\n      url: API_URL + 'tolerances',\n      method: \"GET\",\n      params: {\n        system: $scope.cur_system,\n        range_id: $scope.ranges[$scope.prev_range_arr_id].id,\n        field_id: $scope.cur_field,\n        quality_id: $scope.cur_quality\n      }\n    }).success(function(data){\n        let tolerance = data[0];\n        if (tolerance) {\n          toleranceToFloat(tolerance);\n          $scope.prev_range_tolerance = tolerance;\n        } else {\n          $scope.prev_range_tolerance = undefined;\n        }\n    })\n  }\n});\n\napp.directive('focus', function($parse, $timeout){\n  return {\n    link: function(scope, element, attrs){\n      var model = $parse(attrs.focus);\n      scope.$watch(model, function(val){\n        if(val === true){\n          $timeout(function () {\n            element[0].focus();\n          });\n        }\n      });\n      element.bind('blur', function(){\n        scope.$apply(model.assign(scope, false));\n      });\n    }\n  };\n});\n"]}